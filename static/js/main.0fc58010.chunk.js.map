{"version":3,"sources":["components/FeedbackApp/FeedbackApp.js","components/Notification/Notification.js","components/Statistics/Statistics.js","components/Section/Section.js","App.js","reportWebVitals.js","index.js","components/FeedbackApp/FeedbackApp.module.css"],"names":["FeedbackApp","options","increment","className","styles","feedback_list","Object","keys","map","key","feedback_list_item","feedback_list_item_button","type","onClick","Notification","message","Statistics","total","positivePercentage","entries","entry","Section","title","children","App","state","good","neutral","bad","incrementValue","value","setState","prevState","countTotalFeedback","values","reduce","countPositiveFeedbackPercentage","Math","floor","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+QAsBeA,MAlBf,YAA4C,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,UAC3B,OACI,oBAAIC,UAAWC,IAAOC,cAAtB,SACKC,OAAOC,KAAKN,GAASO,KAAI,SAAAC,GAAG,OACzB,oBAAcN,UAAWC,IAAOM,mBAAhC,SACI,wBAAQP,UAAWC,IAAOO,0BAA2BC,KAAK,SAASC,QAAS,kBAAMX,EAAUO,IAA5F,SACKA,KAFAA,SCGVK,MARf,YAAkC,IAAXC,EAAU,EAAVA,QACnB,OAAQ,6BAAMA,KC0BHC,MA1Bf,YAAyD,IAApCf,EAAmC,EAAnCA,QAAQgB,EAA2B,EAA3BA,MAAMC,EAAqB,EAArBA,mBAC/B,OACI,qCACA,4CACKD,GAAS,EACJ,qCACE,6BACIX,OAAOa,QAAQlB,GAASO,KAAI,SAAAY,GAAK,OAC/B,+BAAoBA,EAAM,GAA1B,KAAgCA,EAAM,KAA7BA,EAAM,SAGrB,uCAAUH,KACV,oDAAuBC,EAAvB,WAEF,cAAC,EAAD,CAAcH,QAAQ,0BCFzBM,MAbf,YAAqC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SACrB,OACI,qCACA,6BAAKD,IACL,8BAAMC,QC8CCC,E,4MA9CbC,MAAQ,CACNC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPC,eAAiB,SAACC,GAChB,EAAKC,UAAS,SAAAC,GACZ,OAAO,eAAGF,EAAQE,EAAUF,GAAS,O,EAIzCG,mBAAqB,WAEnB,OADc3B,OAAO4B,OAAO,EAAKT,OAAOU,QAAO,SAAClB,EAAOa,GAAR,OAAkBb,EAAQa,IAAO,I,EAIlFM,gCAAkC,WAChC,IAAQV,EAAS,EAAKD,MAAdC,KAQR,OANkC,IAA9B,EAAKO,qBACY,EAEAI,KAAKC,MAAa,IAAPZ,EAAa,EAAKO,uB,4CAMpD,WACE,OACE,cAAC,EAAD,CAASX,MAAM,yBAAf,SACE,qCACA,cAAC,EAAD,CACErB,QAASsC,KAAKd,MACdvB,UAAYqC,KAAKV,iBACnB,cAAC,EAAD,CACE5B,QAASsC,KAAKd,MACdR,MAAQsB,KAAKN,qBACbf,mBAAqBqB,KAAKH,6C,GAxClBI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBChBAc,EAAOC,QAAU,CAAC,cAAgB,mCAAmC,mBAAqB,wCAAwC,0BAA4B,kD","file":"static/js/main.0fc58010.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './FeedbackApp.module.css';\r\n\r\nfunction FeedbackApp({options, increment}) {\r\n    return (\r\n        <ul className={styles.feedback_list}>\r\n            {Object.keys(options).map(key => (\r\n                <li key={key} className={styles.feedback_list_item}>\r\n                    <button className={styles.feedback_list_item_button} type=\"button\" onClick={() => increment(key)}>\r\n                        {key}</button>\r\n                </li>\r\n               ))}\r\n        </ul>\r\n    ) \r\n};\r\n\r\nFeedbackApp.propTypes = {\r\n    options: PropTypes.object.isRequired,\r\n    increment: PropTypes.func.isRequired\r\n};\r\n    \r\nexport default FeedbackApp;","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Notification({message}) {\r\n    return (<h3>{ message }</h3>)\r\n};\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Notification","import React from 'react'\r\nimport Notification from \"../Notification\";\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Statistics({options,total,positivePercentage}) {\r\n    return (\r\n        <>\r\n        <h2>Statistics</h2>\r\n            {total >= 1\r\n                ? <>\r\n                    <ul>\r\n                       {Object.entries(options).map(entry => (\r\n                          <li key={entry[0]}>{entry[0]}: {entry[1] }</li>\r\n                        ))}\r\n                    </ul>\r\n                    <p>Total:{total}</p>\r\n                    <p>Positive Feedback: {positivePercentage} %</p>\r\n                  </>\r\n                : <Notification message=\"No feedback given\"/>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nStatistics.propTypes = {\r\n    options: PropTypes.object.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Section({title, children}) {\r\n    return (\r\n        <>\r\n        <h2>{title}</h2>\r\n        <div>{children}</div>\r\n        </>\r\n    )\r\n};\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Section","import React, { Component } from 'react';\nimport FeedbackApp from \"./components/FeedbackApp\";\nimport Statistics from \"./components/Statistics\";\nimport Section from \"./components/Section\";\n\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  };\n\n  incrementValue = (value) => {\n    this.setState(prevState => {\n      return { [value]: prevState[value] + 1 }\n    })\n  };\n\n  countTotalFeedback = () => {\n    const total = Object.values(this.state).reduce((total, value) => total + value, 0);\n    return total;\n  };\n  \n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    let positiveFeedback;\n    if (this.countTotalFeedback() === 0) {\n      positiveFeedback = 0;\n    } else {\n      positiveFeedback = Math.floor(good * 100 / this.countTotalFeedback());\n    };\n        \n    return positiveFeedback;\n  };\n  \n  render() {\n    return (\n      <Section title='Please, leave feedback'>\n        <>\n        <FeedbackApp\n          options={this.state}\n          increment={ this.incrementValue }/>\n        <Statistics\n          options={this.state}\n          total={ this.countTotalFeedback() }\n          positivePercentage={ this.countPositiveFeedbackPercentage() } />\n        </>\n      </Section>\n    )\n  };\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feedback_list\":\"FeedbackApp_feedback_list__XE4nP\",\"feedback_list_item\":\"FeedbackApp_feedback_list_item__2VPNo\",\"feedback_list_item_button\":\"FeedbackApp_feedback_list_item_button__2Z_Nn\"};"],"sourceRoot":""}